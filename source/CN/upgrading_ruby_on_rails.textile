h2. Ruby on Rails 升级指南

本指南提供了当你欲将应用升级到一个更新版本的 Ruby on Rails 时可以遵循的一些步骤。这些步骤在每次的发布指南中也可以找到。

endprologue.

h3. 一般性建议

在尝试升级一个已经存在的应用之前请保证你有恰切的理由这么做。你需要权衡再三：对新的特性的需求，对旧代码寻求支持所增加的难度，你现有的时间和技术水准，等等。

h4(#general_testing). 测试覆盖率

能保证升级后你的应用还可以正常工作的万全之策在升级之前拥有良好的测试覆盖率。如果你还没有对你的应用进行过大量的自动化测试，你需要花时间手动对所有做过改动的部分进行测试。 对于 Rails 升级而言，这意味着应用中的每一个 functionality 。想对自己好点儿的话在升级 Rails 之前还是确认一个良好的测试覆盖率吧。

h4(#general_ruby). Ruby 版本

Rails 通常都是紧随最新的 Ruby 版本而发布。

* Rails 3 以上版本需要 Ruby 1.8.7 或更高。 对于更早的 Ruby 版本官方已经停止支持，所以你还是尽可能趁早升级吧。
* Rails 3.2.x 将是支持 Ruby 1.8.7 的最后一个分支。
* Rails 4 只支持 Ruby 1.9.3。

建议：Ruby 1.8.7 p248 及 p249 存在可导致 Ruby 崩溃的 marshaling bugs。 Ruby 的 Enterprise Edition 自 1.8.7-2010.02 的发布修复了此问题。 作为 1.9 的开端的 Ruby 1.9.1 也公然存在这个段错误（segfaults）而不可以用。因此如果你想使用 1.9.x ，请直接跳到 1.9.2 或 1.9.3 可保畅行无阻。

h3. 升级 Rails 3.2 至 Rails 4.0

注:本节还在完善中。

如果你的应用现今跑在 3.2.x 之前的任何版本上，在尝试升级到 Rails 4.0 之前你需要先升级至 Rails 3.2。

如下的改动是为了升级你的应用至 Rails 4.0.

h4(#plugins4_0). vendor/plugins

Rails 4.0 不再支持从 <tt>vendor/plugins</tt> 载入插件。你必须通过从插件中提取出 gem 的方式来替换掉任何插件，然后把它们添加到你的 Gemfile 中， 如果你不选择把它们制作成 gem 的方式，你可以把它们移到 <tt>lib/my_plugin/*</tt> ，然后在 <tt>config/initializers/my_plugin.rb</tt> 中添加一个正确的 initializer。

h4(#identity_map4_0). IdentityMap

Rails 4.0 从  <tt>ActiveRecord</tt> 中去掉了 <tt>IdentityMap</tt> ， 源于 "some inconsistencies with associations":https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6. 如果你曾经在应用中手动开启了它，你必须去掉下面的配置，以使之不再有效: <tt>config.active_record.identity_map</tt>.

h3. 升级 Rails 3.1 至 Rails 3.2

如果你的应用现今跑在 3.1.x 之前的任何版本上，在尝试升级到 Rails 3.2 之前你需要先升级至 Rails 3.1 。

如下的改动是为了升级你的应用至 Rails 3.2.2 ，这是 Rails 最新的 3.2.x 版本 。

h4(#gemfile3_2). Gemfile

对你的 +Gemfile+ 作如下改动：

<ruby>
gem 'rails', '= 3.2.2'

group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier',     '>= 1.0.3'
end
</ruby>

h4(#config_dev3_2). config/environments/development.rb

你需要添加很多新的配置设置到你的开发环境：

<ruby>
# 对 Active Record models 的 mass assignment protection 抛出异常
config.active_record.mass_assignment_sanitizer = :strict

# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5
</ruby>

h4(#config_test3_2). config/environments/test.rb

<tt>mass_assignment_sanitizer</tt> 的配置设置同样要添加到 <tt>config/environments/test.rb</tt>:

<ruby>
# 对 Active Record models 的 mass assignment protection 抛出异常
config.active_record.mass_assignment_sanitizer = :strict
</ruby>

h4(#plugins3_2). vendor/plugins

Rails 3.2 弱化了 <tt>vendor/plugins</tt> ，在 Rails 4.0 中则完全去掉了。 因此它并非是升级 Rails 3.2 而严格需要的一部分，你可以通过从插件中提取出 gem 的方式来替换掉任何插件，然后把它们添加到你的 Gemfile 中， 如果你不选择把它们制作成 gem 的方式，你可以把它们移到 <tt>lib/my_plugin/*</tt> ，然后在 <tt>config/initializers/my_plugin.rb</tt> 中添加一个正确的 initializer。

h3. 升级 Rails 3.0 至 Rails 3.1

如果你的应用现今跑在 3.0.x 之前的任何版本上，在尝试升级到 Rails 3.1 之前你需要先升级至 Rails 3.0 。

如下的改动是为了升级你的应用至 Rails 3.1.3 ，这是 Rails 最新的 3.1.x 版本。

h4(#gemfile3_1). Gemfile

对你的 +Gemfile+ 作如下改动：

<ruby>
gem 'rails', '= 3.1.3'
gem 'mysql2'

# Needed for the new asset pipeline
group :assets do
  gem 'sass-rails',   "~> 3.1.5"
  gem 'coffee-rails', "~> 3.1.1"
  gem 'uglifier',     ">= 1.0.3"
end

# 在 Rails 3.1 中 jQuery 是默认 JavaScript 库。
gem 'jquery-rails'
</ruby>

h4(#config_app3_1). config/application.rb

asset pipeline 需要增加如下几行：

<ruby>
config.assets.enabled = true
config.assets.version = '1.0'
</ruby>

如果你的应用使用了 "/assets" 给一个 resource 作为路由，你或许希望可以更改 assets 的前缀来避免冲突：

<ruby>
# Defaults to '/assets'
config.assets.prefix = '/asset-files'
</ruby>

h4(#config_dev3_1). config/environments/development.rb

在 <tt>config.action_view.debug_rjs = true</tt> 中去掉 RJS 设置。

如果你开启了 asset pipeline 请增加这些设置：

<ruby>
# 不压缩 assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true
</ruby>

h4(#config_prod3_1). config/environments/production.rb

同样下面的大部分改动都是为 asset pipeline 而做。 更详细的内容可以阅读 "Asset Pipeline":asset_pipeline.html 指南。

<ruby>
# 压缩 JavaScripts 和 CSS 文件
config.assets.compress = true

# 当找不到一个预编译的 asset 时不要后退回 assets pipeline
config.assets.compile = false

# 为 assets URLs 生成摘要
config.assets.digest = true

# 默认为 Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH

# 预编译额外的 assets ( 已经添加的 application.js， application.css， 及所有的非JS/CSS )
# config.assets.precompile += %w( search.js )

# 强制对应用的所有访问都是通过 SSL，使用 Strict-Transport-Security 以及 secure cookies。
# config.force_ssl = true
</ruby>

h4(#config_test3_1). config/environments/test.rb

在 test environment 中添加这些可以提升测试效能：

<ruby>
# 配置静态 asset 服务器，测试开启了 Cache-Control 时的性能
config.serve_static_assets = true
config.static_cache_control = "public, max-age=3600"
</ruby>

h4(#config_wp3_1). config/initializers/wrap_parameters.rb

如果你希望把参数打包进一个嵌套的哈希时，请添加包含如下内容的文件。在一个新的应用中这个是默认打开的。

<ruby>
# 在你修改了该文件后务必重启服务器。
# 该文件对 ActionController::ParamsWrapper 的设置是默认开启的。

# 打开 JSON 的参数打包功能。通过给 :format 设置一个空数组可关闭该功能。
ActiveSupport.on_load(:action_controller) do
  wrap_parameters :format => [:json]
end

# 关闭 JSON 的默认根元素功能。
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
end
</ruby>
