h2. Ruby on Rails 升级指南

本指南提供了当你欲将应用升级到一个更新版本的 Ruby on Rails 时可以遵循的一些步骤。这些步骤在每一的发布指南中也可以找到。

endprologue.

h3. 一般性建议

在尝试升级一个已经存在的应用之前请保证你有恰切的理由这么做。你需要权衡再三：对新的特性的需求，对旧代码寻求支持所增加的难度，你现有的时间和技术水准，等等。

h4(#general_testing). 测试覆盖（Test Coverage）

能保证升级后你的应用还可以正常工作的万全之策在升级之前拥有良好的测试覆盖。 If you don't have automated tests that exercise the bulk of your application, you'll need to spend time manually exercising all the parts that have changed. In the case of a Rails upgrade, that will mean every single piece of functionality in the application. Do yourself a favor and make sure your test coverage is good _before_ you start an upgrade.

h4(#general_ruby). Ruby 版本

Rails 通常都是紧随最新的 Ruby 版本而发布。

* Rails 3 以上版本需要 Ruby 1.8.7 或更高。 对于更早的 Ruby 版本官方已经停止支持，所以你还是尽可能趁早升级吧。
* Rails 3.2.x 将是支持 Ruby 1.8.7 的最后一个分支。
* Rails 4 只支持 Ruby 1.9.3。

TIP: Ruby 1.8.7 p248 and p249 have marshaling bugs that crash Rails. Ruby Enterprise Edition has these fixed since the release of 1.8.7-2010.02. On the 1.9 front, Ruby 1.9.1 is not usable because it outright segfaults, so if you want to use 1.9.x, jump on to 1.9.2 or 1.9.3 for smooth sailing.

h3. 升级 Rails 3.2 至 Rails 4.0

注:本节还在完善中。

如果你的应用现今跑在 3.2.x 之前的任何版本上，在尝试升级到 Rails 4.0 之前你需要先升级至 Rails 3.2。

如下的改动是为了升级你的应用至 Rails 4.0.

h4(#plugins4_0). vendor/plugins

Rails 4.0 不再支持从 <tt>vendor/plugins</tt> 载入插件。你必须通过把它们解压为 gem 文件，然后添加到 Gemfile 的方式来替换插件。 If you choose not to make them gems, you can move them into, say, <tt>lib/my_plugin/*</tt> and add an appropriate initializer in <tt>config/initializers/my_plugin.rb</tt>.

h4(#identity_map4_0). IdentityMap

Rails 4.0 从  <tt>ActiveRecord</tt> 中去掉了 <tt>IdentityMap</tt> ， 源于 "some inconsistencies with associations":https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6. If you have manually enabled it in your application, you will have to remove the following config that has no effect anymore: <tt>config.active_record.identity_map</tt>.

h3. 升级 Rails 3.1 至 Rails 3.2

如果你的应用现今跑在 3.1.x 之前的任何版本上，在尝试升级到 Rails 3.2 之前你需要先升级至 Rails 3.1 。

如下的改动是为了升级你的应用至 Rails 3.2.2 -- Rails 的最新的 3.2.x 版本 。

h4(#gemfile3_2). Gemfile

对你的 +Gemfile+ 作如下改动：

<ruby>
gem 'rails', '= 3.2.2'

group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier',     '>= 1.0.3'
end
</ruby>

h4(#config_dev3_2). config/environments/development.rb

你需要添加很多新的配置设置到你的开发环境：

<ruby>
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict

# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5
</ruby>

h4(#config_test3_2). config/environments/test.rb

The <tt>mass_assignment_sanitizer</tt> configuration setting should also be be added to <tt>config/environments/test.rb</tt>:

<ruby>
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict
</ruby>

h4(#plugins3_2). vendor/plugins

Rails 3.2 deprecates <tt>vendor/plugins</tt> and Rails 4.0 will remove them completely. While it's not strictly necessary as part of a Rails 3.2 upgrade, you can start replacing any plugins by extracting them to gems and adding them to your Gemfile. If you choose not to make them gems, you can move them into, say, <tt>lib/my_plugin/*</tt> and add an appropriate initializer in <tt>config/initializers/my_plugin.rb</tt>.

h3. Upgrading from Rails 3.0 to Rails 3.1

If your application is currently on any version of Rails older than 3.0.x, you should upgrade to Rails 3.0 before attempting an update to Rails 3.1.

The following changes are meant for upgrading your application to Rails 3.1.3, the latest 3.1.x version of Rails.

h4(#gemfile3_1). Gemfile

Make the following changes to your +Gemfile+.

<ruby>
gem 'rails', '= 3.1.3'
gem 'mysql2'

# Needed for the new asset pipeline
group :assets do
  gem 'sass-rails',   "~> 3.1.5"
  gem 'coffee-rails', "~> 3.1.1"
  gem 'uglifier',     ">= 1.0.3"
end

# jQuery is the default JavaScript library in Rails 3.1
gem 'jquery-rails'
</ruby>

h4(#config_app3_1). config/application.rb

The asset pipeline requires the following additions:

<ruby>
config.assets.enabled = true
config.assets.version = '1.0'
</ruby>

If your application is using an "/assets" route for a resource you may want change the prefix used for assets to avoid conflicts:

<ruby>
# Defaults to '/assets'
config.assets.prefix = '/asset-files'
</ruby>

h4(#config_dev3_1). config/environments/development.rb

Remove the RJS setting <tt>config.action_view.debug_rjs = true</tt>.

Add these settings if you enable the asset pipeline:

<ruby>
# Do not compress assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true
</ruby>

h4(#config_prod3_1). config/environments/production.rb

Again, most of the changes below are for the asset pipeline. You can read more about these in the "Asset Pipeline":asset_pipeline.html guide.

<ruby>
# Compress JavaScripts and CSS
config.assets.compress = true

# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false

# Generate digests for assets URLs
config.assets.digest = true

# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH

# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( search.js )

# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
# config.force_ssl = true
</ruby>

h4(#config_test3_1). config/environments/test.rb

You can help test performance with these additions to your test environment:

<ruby>
# Configure static asset server for tests with Cache-Control for performance
config.serve_static_assets = true
config.static_cache_control = "public, max-age=3600"
</ruby>

h4(#config_wp3_1). config/initializers/wrap_parameters.rb

Add this file with the following contents, if you wish to wrap parameters into a nested hash. This is on by default in new applications.

<ruby>
# Be sure to restart your server when you modify this file.
# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.

# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters :format => [:json]
end

# Disable root element in JSON by default.
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
end
</ruby>
